{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AchievementSystem","text":"<p>Achievement System instances manage Stats and Achievements. Once an achievement of the system is achieved, the <code>OnAchieved</code> event will be invoked. If an achievement makes progress, the <code>OnProgressMade</code> event will be invoked.</p>"},{"location":"#stats","title":"Stats","text":"<p>Full article: Click here</p> <p>Stats have to be created using the <code>AddStat</code> function of an AchievementSystem instance. Stats can contain any value of a specified type. Their value can be changed using their <code>Value</code> property. Once the value is changed, stats will invoke their <code>OnValueChanged</code> event.</p>"},{"location":"#conditions","title":"Conditions","text":"<p>Full article: Click here</p> <p>Conditions are objects that can check something. They keep track of their current state. It can be accessed using using the <code>IsTrue</code> property. Whenever their state changes, conditions will invoke their <code>OnConditionTrue</code> or <code>OnConditionFalse</code> events. Conditions can be updated by calling their <code>Update</code> function. This will check the condition and update the state.</p>"},{"location":"#achievements","title":"Achievements","text":"<p>Full article: Click here</p> <p>Achievements are defined as a set of conditions. Once all conditions are true simultaneously, the achievement is achieved. Achievements have to be created using the <code>AddAchievement</code> function of an AchievementSystem instance. To check if progress was made you can use the <code>TryUpdateAchievement</code> function Once progress is made towards completing an achievement, the Achievement System will invoke the <code>OnProgressMade</code> event. Once an achievement is achieved, the Achievement System will invoke the <code>OnAchieved</code> event.</p>"},{"location":"Concepts/Achievements/","title":"Achievements","text":"<p>Achievements are defined as a set of conditions. Once all conditions are true simultaneously, the achievement is achieved. Achievements have to be created using the <code>AddAchievement</code> function of an AchievementSystem instance.</p> <p>To check if an achievement was achieved you can use the <code>IsAchieved</code> function. Once an achievement is achieved, the AchievementSystem will invoke its <code>OnAchieved</code> event.</p> <p>To get the current progress of an achievement, you can use the <code>GetAchievementProgress</code> function. To make the system check, if progress was made, you can use the <code>TryUpdateAchievement</code> function. Once progress towards completing an achievement is noticed, the AchievementSystem will invoke its <code>OnProgressMade</code> event.</p>"},{"location":"Concepts/Achievements/#adding-achievements","title":"Adding Achievements","text":"<p>To add achievements you need to specify which conditions the achievement should depend on. This can be done using an AchievementBuilder instance. <pre><code>achievementSystem&lt;string, string&gt; achievementSystem = new();\nachievementSystem.AddStat&lt;uint&gt;(\"frogs kissed\", out Stat&lt;uint&gt; stat);\n\nachievementSystem.AddAchievement(\"10 frogs kissed\", new AchievementBuilder().AddStatGreaterEqualsCondition(stat, 10));\n</code></pre></p> <p>The Achievement Builder uses the fluent pattern for all it's functions. The creation of a multiconditional achievement may look like this: <pre><code>achievementSystem.AddStat&lt;bool&gt;(\"Hyla arborea kissed\", out Stat&lt;bool&gt; hylaArboreaKissed);\nachievementSystem.AddStat&lt;bool&gt;(\"phyllobates terribilis kissed\", out Stat&lt;bool&gt; phyllobatesTerribilisKissed);\n\nachievementSystem.AddAchievement\n(\n    \"All frog types kissed\",\n    new AchievementBuilder()\n        .AddStatTrueCondition(phyllobatesTerribilisKissed)\n        .AddStatTrueCondition(hylaArboreaKissed)\n);\n</code></pre></p> <p>It is recommended to mostly rely on stat based conditions. These will update automatically, whenever the stat's value is changed.</p> <p>You can also create your own types of conditions, if you want to.</p>"},{"location":"Concepts/Achievements/#tracking-an-achievements-progress","title":"Tracking an achievement's progress","text":"<p>If you want to be able to track an achievement's progress, you have to set a progress tracker in the AchievementBuilder. Progress Trackers are functions that return a float between 0 and 1.</p> <ul> <li>0 means that no progress has been made.</li> <li>0.5 means that it's half way done.</li> <li>1 means that it's done. <pre><code>achievementSystem&lt;string, string&gt; achievementSystem = new();\nachievementSystem.AddStat&lt;uint&gt;(\"frogs kissed\", out Stat&lt;uint&gt; stat);\n\nachievementSystem.AddAchievement(\n    \"10 frogs kissed\",\n    new AchievementBuilder()\n        .AddStatGreaterEqualsCondition(stat, 10)\n        .SetProgressTracker(_ =&gt; {return (float)stat.Value / 10;})\n);\n</code></pre></li> </ul> <p>You can use the TryUpdateAchievement function of the achievementSystem to update an Achievement's progress. <pre><code>achievementSystem.TryUpdateAchievemend(\"frogs kissed\");\n</code></pre></p> <p>This will make the AchievementSystem call the <code>OnProgressMade</code> event if necessary</p>"},{"location":"Concepts/Conditions/","title":"Conditions","text":"<p>Conditions are objects that can check something. They keep track of their current state. The state can be accessed using using the <code>IsTrue</code> property. Whenever their state changes, conditions will invoke their <code>OnConditionTrue</code> or <code>OnConditionFalse</code> events. Conditions can be updated by calling their <code>Update</code> function. This will check the condition and update the state.</p>"},{"location":"Concepts/Conditions/#stat-conditions","title":"Stat Conditions","text":"<p>It is recommended to mostly use stat based conditions for achievements as these update automatically, whenever stats change. There are multiple different predefined types of stat based conditions</p> <ul> <li>StatGreaterConditions are true when a specific stat's value is greater than a specified value.</li> <li>StatGreaterEqualsConditions are true when a specific stat's value is greater than or equal to a specified value.</li> <li>StatEqualsConditions are true when a specific stat's value is equal to a specified value.</li> <li>StatLesserEqualsConditions are true when a specific stat's value is lesser than or equal to a specified value.</li> <li>StatLesserConditions are true when a specific stat's value is lesser than a specified value.</li> <li>StatTrueConditions are true when a specific bool stat's value is true.</li> <li>StatFalseConditions are true when a specific bool stat's value is false.</li> </ul>"},{"location":"Concepts/Conditions/#custom-conditions","title":"Custom Conditions","text":"<p>You can create your own condition types. The following is an example condition that checks if a uint stat holds the value 0. As it's a StatCondition, it will automatically update whenever the Stat's value changes. <pre><code>public class StatZeroCondition : StatCondition&lt;uint&gt;\n{\n    public StatZeroCondition(Stat&lt;uint&gt; stat)\n        : base(stat) { }\n\n    protected override bool IsConditionTrue()\n    {\n        return Stat.Value == 0;\n    }\n}\n</code></pre></p> <p>The AchievementBuilder allows using any Condition for its achievements using the <code>AddCondition</code> function. This allows you to create extension methods for any condition types you want. <pre><code>public static class AchievementBuilderExtension\n{\n    public static AchievementBuilder AddStatZeroCondition(this AchievementBuilder achievementBuilder, Stat&lt;uint&gt; stat)\n    {\n        return achievementBuilder.AddCondition(new StatZeroCondition(stat));\n    }\n}\n</code></pre></p>"},{"location":"Concepts/Stats/","title":"Stats","text":"<p>Stats can contain any value of a specified type. Stats have to be created using the <code>AddStat</code> function of an AchievementSystem instance. Their value can be changed using their <code>Value</code> property. Once the value is changed, stats will invoke their <code>OnValueChanged</code> event.</p>"},{"location":"Concepts/Stats/#adding-stats","title":"Adding Stats","text":"<p>Stats can only be created using an Achievement System instance.</p> <p>In the following, an Achievement System that uses string ids will be used. <pre><code>AchievementSystem&lt;string, string&gt; achievementSystem = new();\n</code></pre></p> <p>The most simple way to add a stat of a type is to only provide a stat ID. The Achievement System will then create a new Stat of the specified type and store it under the provided id. The initial value will be the Type's specified default. (in this case: 0) <pre><code>achievementSystem.AddStat&lt;uint&gt;(\"frogs kissed\");\n</code></pre></p>"},{"location":"Concepts/Stats/#optional-parameters","title":"Optional Parameters","text":"<p>It is possible to provide a value, which will then be used as the stat's initial value instead of the Type's specified default. <pre><code>achievementSystem.AddStat&lt;uint&gt;(\"chameleons found\", 5);\n</code></pre></p> <p>It is possible to instantly get a reference to the created stat by providing an out parameter. <pre><code>achievementSystem.AddStat&lt;uint&gt;(\"porcupines hugged\", out Stat&lt;uint&gt; stat);\n</code></pre></p>"},{"location":"Concepts/Stats/#exceptionless-try-methods","title":"Exceptionless Try Methods","text":"<p><code>AddStat</code> will throw an exception, if the Achievement System already contains a Stat using the same type and id.</p> <p>Use <code>TryAddStat</code>, if you don't want the code to throw exceptions. This function will return a bool indicating whether or not the operation was successful. <pre><code>achievementSystem.TryAddStat&lt;uint&gt;(\"frogs kissed\");\nachievementSystem.TryAddStat&lt;uint&gt;(\"chameleons found\", 5);\nachievementSystem.TryAddStat&lt;uint&gt;(\"porcupines hugged\", out Stat&lt;uint&gt; stat);\n</code></pre></p>"},{"location":"Concepts/Stats/#retrieving-stats","title":"Retrieving Stats","text":"<p>Once you have created a stat in the Achievement System, you can get access to the stat object by using <code>GetStat</code>. Access to the Stat object allows modifying it's value.</p> <pre><code>achievementSystem.GetStat&lt;uint&gt;(\"frogs kissed\").Value++;\n</code></pre>"},{"location":"Concepts/Stats/#exceptionless-try-method","title":"Exceptionless Try Method","text":"<p><code>GetStat</code> will throw an exception, if the Achievement System can not find the stat.</p> <p>Use <code>TryGetStat</code>, if you don't want the code to throw exceptions. This function will return a bool indicating whether or not the operation was successful. The stat will be provided using an out parameter. <pre><code>if (achievementSystem.TryGetStat&lt;uint&gt;(\"chameleons found\", out Stat&lt;uint&gt; stat))\n    stat.Value++;\n</code></pre></p>"},{"location":"Concepts/Stats/#changing-a-stats-value","title":"Changing a Stat's value","text":"<p>If you only want to modify a Stat's value and don't need the Stat Object, you can use <code>SetStat</code> instead.</p> <pre><code>achievementSystem.SetStat&lt;uint&gt;(\"porcupines hugged\", 10);\n</code></pre>"},{"location":"Concepts/Stats/#exceptionless-try-method_1","title":"Exceptionless Try Method","text":"<p><code>SetStat</code> will throw an exception, if the Achievement System can not find the stat.</p> <p>Use <code>TrySetStat</code>, if you don't want the code to throw exceptions. This function will return a bool indicating whether or not the operation was successful. <pre><code>achievementSystem.TrySetStat&lt;uint&gt;(\"Elephants hidden\", 15);\n</code></pre></p>"}]}